@inherits TestContext

@using Moq

@using ToolsApp.Components.CarTool
@using ToolsApp.Models.Cars;

@code {


  NewCar car = new("Ford",
      "Fusion Hybrid",
      2020,
      "blue",
      45000.0M);

  [Fact]
  public void CarFormSubmitButtonOutput()
  {
    // Arrange
    var submitCarActionMock = Mock.Of<Action<NewCar>>();
    var cut = Render(@<CarForm ButtonText="Add Car"
      OnSubmitCar="submitCarActionMock" />);

    // Act

    var makeInputElement = cut.Find("label:nth-of-type(1) input");
    makeInputElement.Change(car.Make);

    var modelInputElement = cut.Find("label:nth-of-type(2) input");
    modelInputElement.Change(car.Model);

    var yearInputElement = cut.Find("label:nth-of-type(3) input");
    yearInputElement.Change(car.Year.ToString());

    var colorInputElement = cut.Find("label:nth-of-type(4) input");
    colorInputElement.Change(car.Color);

    var priceInputElement = cut.Find("label:nth-of-type(5) input");
    priceInputElement.Change(car.Price.ToString());


    var formElement = cut.Find("form");

    formElement.Submit();

    // Assert
    Mock.Get(submitCarActionMock).Verify(mock => mock(car), Times.Once());
  }

}
